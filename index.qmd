---
title: "Módulo 4: Visualización de datos con `ggplot2`"
title-slide-attributes:
  data-background-image: images/icon.png
  data-background-size: contain
  data-background-opacity: "0.2"
author: 
  - name: Mauricio Moreno, PhD
logo: images/icon.png
format: 
  revealjs:
    slide-number: true
    width: 1366
    preview-links: auto
    touch: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: false
    revealjs-plugins:
      - pointer
editor: visual
---

## Introducción {.smaller}

::: incremental
-   En este módulo aprenderemos a hacer uso del paquete `ggplot2` del `tidyverse`.

-   A la par, veremos estrategias de llevar a cabo analisis exploratorio de datos (AED) ya que este depende mayoritariamente de ayudas visuales.

-   Usaremos además los datos del paquete `palmerpenguins` así también como los datos del archivo de Excel "rotaXLS.xlsx".

-   Paquetes adicionales: `viridis`, `ggsci`, `patchwork`, `finalfit`, `GGally`: 

-   `install.packages("viridis", "ggsci", "patchwork", "finalfit", "GGally")`

-   Aprenderemos entonces, paso a paso cómo funciona `ggplot2` dando un vistazo a sus funciones y objetos.
:::

# Introducción a `ggplot2`

## `ggplot2` {.smaller}

::: incremental
-   `ggplot2` es un paquete de gráficos creada por Hadley Wickham en 2005 como una opción alternativa a los gráficos base de R (es de hecho este paquete el que inició el `tidyverse`).

-   Se basa en añadir elementos a un gráfico capa por capa.

-   Tanto tablas anchas como largas pueden suministrarse a `ggplot2`. Sin embargo, en la mayoría de los casos, se explotan más sus capacidades al utilizar tablas largas.

-   Presenta varias ventajas, entre ellas:

    -   Mayor versatilidad al integrar funciones predeterminadas que permiten cambiar entre tipos de gráficos fácil y rápidamente.

    -   Amplia variedad de paletas de color y estilos (útiles para crear gráficos profesionales y listos para publicación).

    -   Basta cantidad de librerías accesorias para gráficos especializados.

-   Su funcionamiento se basa principalmente en:

    -   El argumento de mapeo (`mapping`)

    -   y, Geometrías (`geom_`).
:::

## Función de inicio `ggplot`

::: incremental
-   Constituye la primera capa o la base para llevar a cabo un gráfico.

-   Posee dos argumentos principales:

    -   `data` para indicar la tabla de datos a usarse

    -   `mapping` para indicar las variables que gobernarán los ejes coordenados del gráfico
:::

## Función de inicio `ggplot` {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center'}
#| code-line-numbers: "1|2|4-6"
library(palmerpenguins)
library(ggplot2)

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm))
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(palmerpenguins)
library(ggplot2)

ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, y = bill_depth_mm))
```
:::

## Geometrías {.smaller}

::: incremental
-   Las geometrías son objetos que serán superpuestos en la base creada por la función de inicio.

-   En general, están nombradas con la preposición `geom_` seguida de su clase.

-   Existen una variedad amplia de geometrías:

    -   `geom_bar` para gráficos de barras

    -   `geom_line` para gráficos de lineas

    -   `geom_boxplot` para gráficos de caja y bigote

    -   `geom_histogram` para histogramas

    -   `geom_density` para densidades

    -   [entre otras](https://ggplot2.tidyverse.org/reference/){target="_blank"}

-   Para añadir geometrías y otras opciones a nuestro gráfico base usamos los operadores:

    -   `+`, ó

    -   `%+%`. Este último no es tan común, ya que sobre-escribe los datos originales.
:::

## Geometrías {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "2-3|4"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm)) +
  geom_point()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(penguins,
       aes(x = bill_length_mm, 
           y = bill_depth_mm)) +
  geom_point()
```
:::

## Estéticas de las geometrías (*aesthetics*) {.smaller}

::: incremental
-   Las geometrías tienen argumentos en común independientemente de sus específicos usos.

-   Entre estas están:

    -   `alpha` determina el nivel de transparencia (entre 0 y 1).

    -   `fill` determina el color de relleno de una geometría. Puede ser agregado de manera manual o en función de otra variable.

    -   `color` o `colour` determina el color del contorno de una geometría. Puede ser agregado de manera manual o en función de otra variable.

-   Existen *aesthetics* más específicos que funcionarán únicamente con ciertas geometrías, tales como:

    -   `size`, determina el tamaño de los puntos en la geometría de puntos (`geom_point`)

    -   `linetype`, con [6 posibles valores](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html){target="_blank"} permite seleccionar el estilo de línea.

    -   `linewidth` determina el grosor de una línea.

    -   `lineend` determina el estilo de los extremos de una línea.

    -   `shape` determina el estilo de los puntos a mostrarse (25 posibles estilos)
:::

## Estéticas de las geometrías (*aesthetics*) {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "2-3|4"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm)) +
  geom_point(alpha = 0.25, color = "red", size = 5)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(penguins,
       aes(x = bill_length_mm, 
           y = bill_depth_mm)) +
  geom_point(alpha = 0.25, color = "red", size = 5)
```
:::

# Formato básico de figuras en `ggplot2`

## Agrupaciones {.scrollable}

-   Se pueden asignar estéticas dependiendo de los grupos presentes en los datos.

-   Podemos definirlo en la función de mapeo.

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "4"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5)
```
:::

## Escalas

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "6-7"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2))
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2))
```
:::

## Paletas de color

::: incremental
-   Una de las razones por las cuales `ggplot2` es tan popular, es la relativa sencillez de usar distintas paletas de color.

-   Al no ser un curso dedicado a visualización de datos, nos limitaremos a explorar la oferta de mis dos librerías preferidas para paletas de color con `ggplot2`.

-   `viridis` ofrece 8 paletas de color basadas en secuencias de azul y amarillo que evitan en la medida de lo posible el color rojo. Es recomendada por ciertos Journals al ser amigable con personas daltónicas.

-   `ggsci` ofrece varias paletas de color inspiradas en los colores usados por distintos journals (por ejemplo: *Nature*, *Lancet* entre otros), además de paletas inspiradas en series de televisión (por ejemplo: *Futurama*, *Rick & Morty* entre otros).
:::

## Paletas de color {.smaller visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|9"
library(viridis)
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_viridis(discrete = T)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(viridis)
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_viridis(discrete = T)
```
:::

## Paletas de color {.smaller visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|9"
library(ggsci)
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(ggsci)
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama()
```
:::



## Facetas {.smaller}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "9"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island)
```
:::

## Etiquetas {.smaller}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "10-15"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie")
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie")
```
:::

## Estilos {.smaller}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "16"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()
```
:::

## Gráficos como objetos {.smaller}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|18-19"
grafico1 <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()

grafico2 <- grafico1 + theme_classic()
grafico2
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
grafico1 <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()

grafico2 <- grafico1 + theme_classic()
grafico2
```
:::

## Geometrías estadísticas

::: incremental
-   Otra funcionalidad importante son las geometrías estadísticas. Entre ellas:

-   `geom_smooth`: grafica regresiones sobre nubes de puntos

-   `geom_errorbar` y `geom_errorbarh`: grafican lineas de error verticales y horizontales respectivamente.

-   `geom_ribbon`: grafica nubes sombreadas que pueden representar varios estadísticos como errores estándar, intervalos de confianza, etc.
:::

## Geometrías estadísticas {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "10"
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  geom_smooth(method = "lm") +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_x_continuous(breaks = seq(30, 60, 5)) +
  scale_y_continuous(breaks = seq(10, 24, 2)) +
  scale_color_futurama() +
  facet_wrap(~island) +
  geom_smooth(method = "lm") +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()
```
:::

## Autoevaluación {.smaller .scrollable}

1)  `theme_light` produce gráficos como

```{r echo=F, eval=T, error=T, fig.align = 'center', fig.width=16}
library(patchwork)
p1 <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_color_futurama() +
  facet_wrap(~island) +
  geom_smooth(method = "lm") +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_bw()

p2 <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_color_futurama() +
  facet_wrap(~island) +
  geom_smooth(method = "lm") +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_minimal()

p3 <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_color_futurama() +
  facet_wrap(~island) +
  geom_smooth(method = "lm") +
  labs(title = "Largo de pico vs. Profundidad de pico",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo del pico",
       y = "Profundidad del pico",
       color = "Especie") +
  theme_light()

pq1 <- p1 + p2 + p3 + plot_annotation(tag_levels = "A")

pq1

```

::: columns
::: {.column width="50%"}
2)  El siguiente gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center', fig.width=4}
ggplot(iris, aes(y=Petal.Width)) + geom_boxplot(aes(fill=Species))
```
:::

::: {.column width="50%"}
Es producido por el(los) código(s):

a)  

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.width=5}
ggplot(iris, aes(y=Petal.Width)) + 
  geom_boxplot(aes(fill=Species))
```

b)  

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.width=5}
ggplot(iris, aes(y=Petal.Width, color=Species)) + 
  geom_boxplot()
```

c)  

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.width=5}
ggplot(iris, aes(y=Petal.Width, fill=Species)) + 
  geom_boxplot()
```
:::
:::

::: columns
::: {.column width="50%"}
3)  Para obtener el siguiente gráfico:

```{r echo=F, eval=T, error=T, fig.align = 'center', fig.height= 5}
library(viridis)
peval <- ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_color_viridis(discrete = T, option = "H")
peval
```
:::

::: {.column width="50%"}
Debo modificar la última línea del código:

```{r echo=T, eval=F}
ggplot(data = penguins,
       mapping = aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     color = species)) +
  geom_point(alpha = 0.25, size = 5) +
  scale_color_viridis()
```
:::
:::

por:

a)  `scale_color_viridis(option = "G")`

b)  `scale_color_viridis(discrete = T, option = "G")`

c)  `scale_color_viridis(discrete = T, option = "H")`

# Principios de Análisis Exploratorio de Datos (AED)

## Datos perdidos {.smaller}

::: incremental
-   La perdida de datos es común en casi todo experimento, sobre todo en aquellos de naturaleza observacional.

-   El primer paso que recomiendo en un análisis exploratorio, es checar si existen o no datos perdidos.

-   Esto por cuanto así se prevee si los métodos de inferencia a usarse necesitan o no ser corregidos.

-   Únicamente cuando la severidad de la pérdida de datos es muy grande aconsejo a recurrir a estas dos opciones (en orden de complejidad estadística de menor a mayor)

    -   Repetir el experimento

    -   Llevar a cabo imputación de datos

-   En este curso vamos a limitarnos a usar métodos de análisis corregidos cuando estemos ante la presencia de datos perdidos ya que la imputación de datos requiere de conocimientos teóricos extensos acerca de los tipos de mecanismos de pérdida de datos.

-   **EVITAR** el reemplazar los valores perdidos por ceros. Esta suele ser una práctica más o menos común pero que introduce mayores problemas que los que "soluciona".

-   En resumen, no hay que temer el contar con datos perdidos, siempre y cuando estos no sean masivos.
:::

## Datos perdidos {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|2"
library(finalfit)
ff_glimpse(penguins)
```

## Datos perdidos {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4}
library(finalfit)
ff_glimpse(penguins)
```

## Datos perdidos {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "3"
library(finalfit)
ff_glimpse(penguins)
missing_plot(penguins)
```

## Datos perdidos {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=6}
missing_plot(penguins)
```

## Datos perdidos {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|2"
sub_penguins <- na.omit(penguins)
ggplot(sub_penguins,
       aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
  geom_point(alpha = 0.7,
             size = 3) +
  geom_smooth(method = "lm") + 
  scale_x_continuous(breaks = seq(150, 250, 10)) +
  scale_y_continuous(breaks = seq(2500, 7000, 500)) +
  scale_color_viridis(discrete = T) +
  facet_wrap(~sex) +
  labs(title = "Largo de aleta vs. peso",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo de aleta",
       y = "Peso",
       color = "Especie") +
  theme_bw()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
sub_penguins <- na.omit(penguins)
ggplot(sub_penguins,
       aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
  geom_point(alpha = 0.7,
             size = 3) +
  geom_smooth(method = "lm") + 
  scale_x_continuous(breaks = seq(150, 250, 10)) +
  scale_y_continuous(breaks = seq(2500, 7000, 500)) +
  scale_color_viridis(discrete = T) +
  facet_wrap(~sex) +
  labs(title = "Largo de aleta vs. peso",
       subtitle = "Pingüinos de Palmer",
       caption = "Gráfica propia",
       x = "Largo de aleta",
       y = "Peso",
       color = "Especie") +
  theme_bw()
```
:::

## Observaciones anormales (outliers) {.smaller}

::: incremental
-   Un outlier puede definirse como aquella observación que dista considerablemente de la **mediana** de una población.

-   Pueden deberse a errores en la toma de mediciones [o valores que realmente existen.]{.fragment}

-   En estadística, una entre varias definiciones de outlier es dada de acuerdo al criterio del Rango Intercuartílico (RIC o *IQR* en inglés).

-   Este criterio establece que toda observación por encima del tercer cuartil + 1.5 veces el RIC o por debajo del primer cuartil - 1.5 veces el RIC es considerada como outlier.
:::

. . .

$$
I=\left[C_{0.25}-1.5 \times RIC ,\,C_{0.75}+1.5 \times RIC \right]
$$

::: incremental
-   Donde el RIC es sencillamente la diferencia entre el primer y el tercer cuartil de una muestra.

-   Este método es precisamente la base para los gráficos de caja y bigote.
:::

## Gráficos de caja y bigote

![](images/box.jpg){fig-align="center"}

::: incremental
-   Un gráfico de caja y bigote es el resumen de 5 cantidades de importancia para explorar una distribución: [la mediana, los cuantiles 1 y 3 y los valores mínimo y máximo de una distribución en función del RIC]{.fragment}
:::

::: footer
Imagen de autoría de [Michael Galarnyk](https://builtin.com/data-science/boxplot){target="_blank"}
:::

## Gráficos de caja y bigote en R base

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|2-4|5|6"
par(mfrow = c(2, 2))
plot(bill_depth_mm ~ island, data = penguins)
plot(bill_depth_mm ~ sex, data = penguins)
plot(bill_depth_mm ~ species, data = penguins)
plot.new()
par(mfrow = c(1, 1))
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center', fig.height=6, fig.width=8}
par(mfrow = c(2, 2))
boxplot(bill_depth_mm ~ island, data = penguins)
boxplot(bill_depth_mm ~ sex, data = penguins)
boxplot(bill_depth_mm ~ species, data = penguins)
plot.new()
par(mfrow = c(1, 1))
```
:::

## Gráficos de caja y bigote en R base {visibility="uncounted"}

::: incremental
-   Los gráficos base de R son de rápida implementación.

-   Generalmente sirven para dar vistazos rápidos a los datos.

-   Pueden por supuesto ser usados para productos finales de publicación, pero la sintaxis para dar formato y exportarlos es un tanto confusa (a mi parecer).

-   Tienen sus limitaciones, [**¿qué tal si en este caso me hubiese gustado realizar un gráfico por facetas para ver más variables categóricas al mismo tiempo?**]{.fragment}
:::

## Gráficos de caja y bigote en `ggplot2`

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|2|3|4|5|6|7"
sub_penguins <- na.omit(penguins)
ggplot(sub_penguins,
       aes(y = bill_depth_mm, x = species, fill = species)) +
  geom_boxplot(outlier.fill = "red",
               outlier.shape = 23) +
  facet_grid(~sex~island) + 
  theme(legend.position = "none")
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
sub_penguins <- na.omit(penguins)
ggplot(sub_penguins,
       aes(y = bill_depth_mm, x = species, fill = species)) +
  geom_boxplot(outlier.fill = "red",
               outlier.shape = 23) +
  facet_grid(~sex~island) + 
  theme(legend.position = "none")
```
:::

## Y ahora, ¿qué hago con los outliers?

![](images/gatito.jpg){fig-align="center"}

## Y ahora, ¿qué hago con los outliers? {.smaller visibility="uncounted"}

::: incremental
-   El remover outliers no se aconseja antes de llevar a cabo análisis de inferencia estadística.

-   Para remover outliers antes de analizar propiamente los datos, se necesita tener certeza de las razones por las cuales estos fueron registrados:

    -   Fallas comprobadas en el equipo de medición

    -   Errores al escribir las mediciones en el medio de registro (libro de laboratorio, base de datos)

    -   Falencias en las técnicas, metodologías o materiales que ayudaron en la toma de las observaciones (reactivos expirados, protocolos mal interpretados o descontinuados)

    -   Si las anteriores no se cumplen, tener respaldo bibliográfico o experiencia de que el valor del outlier es improbable en la población sujeto de estudio.

-   Muchas veces, los aparentes outliers no tienen mayor efecto en las inferencias que se realicen. Y en los casos extremos de considerar su remoción, se puede recurrir a transformaciones de los datos. [En otras palabras, el último recurso es removerlos.]{.fragment}

-   Cuando llegado el caso, no existe otra opción, **debería** ser una obligación el reportar las razones para no considerarlos en el análisis [(**integridad científica**).]{.fragment}
:::

## ¿Cómo remuevo outliers? {.smaller}

::: incremental
-   La respuesta más simple: borrarlos de la base de datos antes de cargarla en R.

-   Sin embargo, a veces trabajamos con tablas de datos extensas, y la remoción manual puede ser larga, tediosa y sujeta a errores que podrían empeorar la situación.

-   Para ilustrar cómo hacerlo en R, vamos a recurrir a un ejemplo más sencillo donde solo lidiemos con una variable categórica a la vez. Así, veamos únicamente al caso de las variables `bill_length_mm` y `species`
:::

. . .

```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4, fig.width=5}
boxplot(bill_length_mm ~ species, data = penguins)
```

## ¿Cómo remuevo outliers? {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4, fig.width=5}
#| code-line-numbers: "1|2|3"
outliers <- boxplot(bill_length_mm ~ species, data = sub_penguins, plot = F)$out
x <- sub_penguins
x <- x[-which(x$bill_length_mm %in% outliers), ]
```

## ¿Cómo remuevo outliers? {visibility="uncounted" autoanimate="true"}

```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4, fig.width=5}
outliers <- boxplot(bill_length_mm ~ species, data = sub_penguins, plot = F)$out
x <- sub_penguins
x <- x[-which(x$bill_length_mm %in% outliers), ]
boxplot(bill_length_mm ~ species, data = x)
```

## Autoevaluación {.smaller .scrollable}

Los datos del archivo de excel "rotXLS.xlsx" que mencionamos brevemente en el módulo anterior contiene información sobre el conteo de casos de rotavirus en Berlín desde el año 2001 hasta el 2020. Las variables de esta tabla de datos son:

::: columns
::: {.column width="50%"}
-   `date`: fecha de cierre de la toma de datos

-   `cases`: número de casos de rotavirus en la semana

-   `week`: semana epidemiológica

-   `incidence`: número de casos/100000 habitantes

-   `FM`: media diaria de velocidad del viento (m/s)

-   `RSK`: media diaria de lluvia (mm)
:::

::: {.column width="50%"}
-   `SHK_TAG`: media diaria de nieve (cm)

-   `PM`: media diaria de presión atmosférica (hPa)

-   `TMK`: media diaria de temperatura (°C)

-   `TXK`: media diaria de temperatura máxima (°C)

-   `TNK`: media diaria de temperatura mínima (°C)

-   `UPM`: media diaria de humedad relativa (%)
:::
:::

En nuestro proyecto podemos importar esta tabla con el siguiente código:

```{r echo=T, eval=T, error=T, fig.align = 'center'}
library(readxl)                           
rot_berlin <- read_excel("datos/rotXLS.xlsx")
```

::: columns
::: {.column width="50%"}
1)  Ignorando por un momento la naturaleza longitudinal de estos datos, podemos crear un gráfico de múltiples cajas de bigotes por semana epidemiológica para el número de casos, que se vería de esta manera:
:::

::: {.column width="50%"}
```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(rot_berlin, aes(x = week, y = cases, group = week)) +
  geom_boxplot()
```
:::
:::

Con el siguiente código:

a)  

```{r echo=T, eval=F, error=T, fig.align = 'center'}
ggplot(rot_berlin, aes(x = week, y = cases)) +
  geom_boxplot()
```

b)  

```{r echo=T, eval=F, error=T, fig.align = 'center'}
ggplot(rot_berlin, aes(x = factor(week), y = cases)) +
  geom_boxplot()
```

c)  

```{r echo=T, eval=F, error=T, fig.align = 'center'}
ggplot(rot_berlin, aes(x = week, y = cases, group = week)) +
  geom_boxplot()
```

2)  Con lo que hemos aprendido hasta el momento, si quisiéramos identificar y remover posibles outliers, podríamos usar el siguiente código:

```{r echo=T, eval=T, error=T, fig.align = 'center'}
out_rot <- boxplot(cases ~ factor(week), data = rot_berlin, plot = F)$out
sub_rot <- rot_berlin
sub_rot <- sub_rot[-which(sub_rot$cases %in% out_rot), ]
```

El número de outliers detectados es:

::: columns
::: {.column width="25%"}
a) 232
:::

::: {.column width="25%"}
b) 323
:::

::: {.column width="25%"}
c) 156
:::

::: {.column width="25%"}
d) 212
:::
:::


::: columns
::: {.column width="50%"}
3)  Mirando el gráfico de cajas y bigotes de `sub_rot`, podríamos llevar a cabo sucesivas nuevas identificaciones y remociones de outliers hasta terminar con un gráfico ya sin puntos fuera de los RIC. Teniendo en cuenta esto, cuál(es) de las siguientes afirmaciones es(son) verdadera(s)
:::

::: {.column width="50%"}
```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(sub_rot, aes(x = week, y = cases, group = week)) +
  geom_boxplot()
```
:::
:::

a) No importa cuántas veces repita el proceso, eliminar todo outlier es una buena práctica

b) Al eliminar un outlier, no hay garantía que otra observación se convierta en uno. 

c) Se aconsejaría remover outliers una sola vez, y continuar con los análisis.

d) Parecería que el RIC no sería un criterio suficiente para remover outliers.


## Relaciones lineales {.smaller}

::: incremental
-   El dar un vistazo a relaciones lineales entre variables continuas también nos puede dar una idea de la presencia de outliers.

-   Adicionalmente, nos permite visualizar arreglos/patrones en los datos que responden a la influencia de variables de agrupación (en el ejemplo de los pingüinos ya vimos que las especies y las islas determinan algún tipo de arreglo).

-   También nos dan una idea de las correlaciones entre las variables. Esto es de mayor importancia en los casos que tenemos en mente llevar a cabo análisis multivariables.

-   Por ejemplo, en análisis de covarianza (cuando una o más variables explanatorias son continuas), no tiene sentido el incluir variables altamente correlacionadas entre sí.

-   Para esto, la forma más sencilla es llevar a cabo gráficos de dispersión para tantos pares posibles de combinaciones de variables continuas tengamos.

-   Esto obviamente sería tedioso y propenso a errores si lo llevamos a cabo de manera manual.

-   Afortunadamente R nos ofrece varias formas de llevar a cabo matrices de gráficos de dispersión
:::

## Matrices de dispersión en R base {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1-4|5"
matriz_penguins <- penguins[,c("bill_length_mm",
                               "bill_depth_mm",
                               "flipper_length_mm",
                               "body_mass_g")]
pairs(matriz_penguins)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
matriz_penguins <- penguins[,c("bill_length_mm",
                               "bill_depth_mm",
                               "flipper_length_mm",
                               "body_mass_g")]
pairs(matriz_penguins)
```
:::

## Matrices de dispersión en `ggplot2` {visibility="uncounted"}

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
#| code-line-numbers: "1|2"
library(GGally)
ggpairs(matriz_penguins)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(GGally)
ggpairs(matriz_penguins)
```
:::

## Histogramas

::: incremental
-   Un histograma es un gráfico estadístico que divide una variable continua en un determinado número de rangos y luego cuenta el número de veces que los datos caen en cada uno de ellos para producir una barra por rango.

-   Sirve como un diagnóstico de la distribución de una muestra.

-   Desde la perspectiva del AED, nos da una idea visual de si las variables se alejan de la normalidad.

    -   Esto último podría dar indicaciones de si es necesaria una transformación.

    -   ¡Pero!... no es recomendable empezar transformando variables directamente hasta no conducir un análisis formal.
:::

## Histogramas en R base y `ggplot2` {.scrollable}

::: columns
::: {.column .fragment width="50%"}
```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4}
hist(penguins$bill_length_mm)
```
:::

::: {.column .fragment width="50%"}
```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4}
hist(penguins$bill_length_mm, breaks = 50)
```
:::
:::

::: columns
::: {.column .fragment width="50%"}
```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4}
ggplot(penguins, aes(x = bill_length_mm)) +
  geom_histogram()
```
:::

::: {.column .fragment width="50%"}
```{r echo=T, eval=T, error=T, fig.align = 'center', fig.height=4}
ggplot(penguins, aes(x = bill_length_mm)) +
  geom_histogram(bins = 50)
```
:::
:::

# Otras geometrías útiles

## Gráficos de densidad

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
ggplot(sub_penguins,
       aes(x = bill_depth_mm, group=species, fill = species)) +
  geom_density(alpha = 0.4)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(sub_penguins,
       aes(x = bill_depth_mm, group=species, fill = species)) +
  geom_density(alpha = 0.4)
```
:::

## Gráficos de barras

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
ggplot(penguins,
       aes(x = species)) +
  geom_bar()
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(sub_penguins,
       aes(x = species)) +
  geom_bar()
```
:::

## Gráficos de barras apiladas

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
ggplot(penguins,
       aes(x = island,
           fill = species)) +
  geom_bar(position = "stack") 
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(penguins,
       aes(x = island,
           fill = species)) +
  geom_bar(position = "stack") 
```
:::

## Mapas de calor en R base {.smaller .scrollable}


-   Gráfico bidimensional de datos en donde los valores son representados con colores.

-   Las variables de los ejes deben ser categóricas, y la intensidad de los colores en el plano coordenado depende de la magnitud de una variable continua.

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
mapa_calor_base <- as.matrix(mtcars)
heatmap(mapa_calor_base)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
mapa_calor_base <- as.matrix(mtcars)
heatmap(mapa_calor_base)
```
:::


## Mapas de calor con `heatmaply` {.smaller .scrollable}


-   Gráfico bidimensional de datos en donde los valores son representados con colores.

-   Las variables de los ejes deben ser categóricas, y la intensidad de los colores en el plano coordenado depende de la magnitud de una variable continua.

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
install.packages("heatmaply", dependencies = T)
library(heatmaply)
heatmaply(
  mtcars,
  scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
    low = "blue", 
    high = "red", 
    midpoint = 200, 
    limits = c(0, 500)
  )
)
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(heatmaply)
library(htmlwidgets)
heatmaply(
  mtcars,
  scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
    low = "blue",
    high = "red",
    midpoint = 200,
    limits = c(0, 500)
  )
)
```
:::

## Gráficos de líneas

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(readxl)                           
rot_berlin <- read_excel("rotXLS.xlsx")
```

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
ggplot(rot_berlin,
       aes(x = date,
           y = cases)) +
  geom_line() 
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
ggplot(rot_berlin,
       aes(x = date,
           y = cases)) +
  geom_line() 
```
:::

## Gráficos de líneas con estadísticos descriptivos

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
library(lubridate)
library(dplyr)

rot_berlin$mes <- month(rot_berlin$date)
rot_berlin$year <- year(rot_berlin$date)
temp_berlin <- rot_berlin %>%
  group_by(mes) %>%
  summarise(n = n(),
            media = mean(TMK),
            desv = sd(TMK),
            s.err = desv/sqrt(n)) 

grafico3 <- ggplot(temp_berlin,
       aes(x = factor(mes),
           y = media,
           group = 1)) +
  geom_point() +
  geom_line() +
  geom_errorbar(aes(ymin = media - s.err,
                    ymax = media + s.err),
                width = .3)
grafico3
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(lubridate)
library(dplyr)

rot_berlin$mes <- month(rot_berlin$date)
rot_berlin$year <- year(rot_berlin$date)
temp_berlin <- rot_berlin %>%
  group_by(mes) %>%
  summarise(n = n(),
            media = mean(TMK),
            desv = sd(TMK),
            s.err = desv/sqrt(n)) 

grafico3 <- ggplot(temp_berlin,
       aes(x = factor(mes),
           y = media,
           group = 1)) +
  geom_point() +
  geom_line() +
  geom_errorbar(aes(ymin = media - s.err,
                    ymax = media + s.err),
                width = .3)
grafico3
```
:::

## Combinando y exportando gráficos de `ggplot2`

::: incremental
-   Un reto que hemos todos encontrado alguna vez es el de combinar varios gráficos en uno solo.

-   Esto requiere paciencia y el uso de software externo (llámese CorelDraw, Adobe Illustrator, PowerPoint o incluso Paint).

-   La librería complementaria `patchwork` nos permite combinar gráficos de `ggplot2` de una manera sencilla y rápida.

-   Además, gracias a la función `ggsave` de `ggplot2` podemos exportar fácilmente nuestros gráficos sin requerir (ojalá) a la ayuda de software externo para dar retoques finales a estos gráficos.
:::

## Combinando gráficos con `patchwork`

::: panel-tabset
### Código

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
library(patchwork)
graficofinal <- (grafico1 | grafico2) / grafico3
graficofinal + plot_annotation(tag_levels = 'A')
```

### Gráfico

```{r echo=F, eval=T, error=T, fig.align = 'center'}
library(patchwork)
graficofinal <- (grafico1 | grafico2) / grafico3
graficofinal + plot_annotation(tag_levels = 'A')
```
:::

::: footer
Para más información de las funciones y utilidades de `patchwork` puedes visitar la [página oficial](https://patchwork.data-imaginist.com/){target="_blank"} con su documentación y ejemplos.
:::

## Exportando gráficos de `ggplot` {.scrollable}

```{r echo=T, eval=T, error=T, fig.align = 'center'}
graficofinal_estavezsi <- graficofinal + plot_annotation(tag_levels = 'A')
ggsave("grafico.png", plot = graficofinal_estavezsi)
```

![](images/out.png){fig-align="center"} 

# Antes de terminar...

## Anatomía de un `ggplot`

![](images/elements.png){fig-align="center"}

::: footer
Imagen tomada de [aquí](https://bookdown.org/alapo/learnr/){target="_blank"}
:::

## Más exploración

::: incremental
-   Lo que hemos revisado hasta el momento, son las técnicas más frecuentemente usadas para AED.

-   Sin embargo, existen librerías de R que permiten también hacer AED de una manera automática y más accesible.

-   Como ejemplos, haremos un enfoque en dos librerías que hacen uso de Shiny para brindar esta experiencia al usuario. Estas son `explore` y `dataxray`
:::

. . .

```{r echo=T, eval=F, error=T, fig.align = 'center', fig.height=4}
library(explore)
explore(penguins)

install.packages("devtools")
install.packages("flexdashboard")
devtools::install_github("agstn/dataxray")
library(dataxray)
report_xray(data = penguins, data_name = 'penguins', study = "ggplot2")
```

## R no es solo ciencia y seriedad

::: incremental


-   Al ser un software de código abierto, abre las posibilidades a que programadores muy hábiles y con mucho tiempo libre por cierto, creen paquetes cuya utilidad puede ser prácticamente nula (al menos desde el punto de vista académico de publicar o morir).

-   Como es de esperarse, la mayoría de estos no están disponibles en CRAN. Sin embargo, les dejo unos cuántos ejemplos

:::


## Antes de terminar... {visibility="uncounted"}

[**ThemePark**](https://matthewbjane.com/ThemePark/){target="_blank"}

-   Este paquete comenzó como una especie de broma a partir del estreno de la película de Barbie.

-   Es básicamente una librería de paletas de color, primeramente basadas en Barbie

![](images/barbie.png){fig-align="center"}

## Antes de terminar... {visibility="uncounted"}

[**ggcats**](https://r-charts.com/miscellaneous/ggcats/){target="_blank"}

-   No tengo idea del origen de este paquete, pero me da gusto saber que existe.

![](images/ggcats.png){fig-align="center"}

## Antes de terminar... {visibility="uncounted" .smaller}

[**datasaurus**](https://cran.r-project.org/web/packages/datasauRus/vignettes/Datasaurus.html){target="_blank"}

-   No tan relacionado con `ggplot2`, pero cabe mencionarlo. El paquete `datasaurus` comenzó inspirado en el data set del mismo nombre creado por Alberto Cairo.

-   Cairo creó el data set enfatizando que: "Nunca confies en estadísticos descriptivos únicamente, siempre visualiza tus datos".

-   Al contrario de los otros dos, este **sí** está disponible en CRAN (es excelente para la enseñanza de correlaciones espurias)


![](images/saurus.png){fig-align="center"}

## Funciones y librerías en esta sesión {.smaller .scrollable}

**Funciones**

-   `seq` genera una secuencia de números.

-   `na.omit` remueve observaciones perdidas.

-   `plot` función de ploteo de R base. Produce diversos gráficos, entre ellos: dispersión, líneas y caja y bigotes.

-   `par` es una función que permite configurar parámetros gráficos de R base. Su uso más común es para setear los cuadrantes del gráfico.

-   `plot.new` produce un gráfico completamente en blanco en R base. Es útil para rellenar cuadrantes de un gráfico (cuando el número de cuadrantes es par y los gráficos a distribuir por cuadrante es impar).

-   `::` operando de localización de objetos. Se lo utiliza para llamar objetos de librerías sin necesidad de cargarlas en la sesión.

**Librerías**

-   `palmerpenguins`

-   `ggplot2` es un paquete con una basta cantidad de funciones para llevar a cabo gráficos.

    -   `ggplot` es la función que da inicio a todo objeto de `ggplot2`.

    -   `geom_` es el prefijo de todas las geometrías de `ggplot2`.
    
    -   `ggsave` permite exportar gráficos de ggplot a diferentes formatos como .png, .jpg, .pdf.

-   `viridis` es un paquete que ofrece 8 paletas de color basadas en secuencias de azul y amarillo (amigable con personas daltónicas).

-   `ggsci` ofrece paletas de color basadas en journals y series de televisión.

-   `finalfit` nos permite realizar exploración de los patrones de datos perdidos.

-   `GGally` es un paquete con funcionalidades extras basadas en `ggplot2`. Aquí nos enfocamos en su uso para realizar gráficos de matrices de variables.
